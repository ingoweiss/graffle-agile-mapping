/*{
    "author": "Ingo Weiss",
    "targets": ["omnigraffle"],
    "type": "action",
    "identifier": "com.ingoweiss.agile_map",
    "version": "0.1",
    "description": "A Graffle plugin for creating freeform maps of user stories the data elements of which can be kept in sync with an external data source",
    "label": "Sync Agile Map",
    "mediumLabel": "Sync Agile Map",
    "longLabel": "Sync Agile Map",
    "paletteLabel": "Sync Agile Map",
}*/
(() => {
    var action = new PlugIn.Action(function(selection) {

        let picker = new FilePicker()
        picker.folders = false
        picker.multiple = false
        picker.types = [FileType.json]

        picker.show().then(function(urls) {
            let url = urls[0]
            url.fetch(function(data_url) {

                // parse data file:
                let data = JSON.parse(data_url.toString())
                if (Object.keys(data).length == 1){
                    stories_raw = data[Object.keys(data)[0]]
                } else {
                    stories_raw = data
                }

                let stories = {}
                if (stories_raw instanceof Array){
                    stories_raw.forEach(story => {
                        stories[story["id"]] = story
                    })
                } else {
                    stories = stories_raw
                }

                // find map elements:
                let templates_canvas = canvases.find(c => c.name == 'Templates')
                let map_canvas = canvases.find(c => c.name == 'Map')
                let card_template = templates_canvas.graphicWithName('card')
                let cards = map_canvas.allGraphicsWithUserDataForKey("card", "type")

                // determine delta:
                let card_ids = new Set(cards.map(x => x.name))
                let story_ids = new Set(Object.keys(stories))
                let added_ids = [...story_ids].filter(id => !card_ids.has(id))
                let deleted_ids = [...card_ids].filter(id => !story_ids.has(id))
                let updated_ids = [...story_ids].filter(id => card_ids.has(id))

                // create cards for added stories:
                let card_width = card_template.geometry.width
                added_ids.forEach((id, index) => {
                    let x = index * (card_width + 50)
                    let card = card_template.duplicateTo(new Point(x, 1), map_canvas)
                    card.name = id
                    let id_field = card.graphics.find(g => g.name == 'id_field')
                    id_field.text = id
                    card.setUserData('id', id)
                    let name_field = card.graphics.find(g => g.name == 'name_field')
                    name_field.text = stories[id]["name"]
                    card.setUserData('name', stories[id]["name"])

                    // mark added cards as new
                    let marker = map_canvas.addShape(
                        'Circle',
                        new Rect(x + card_width - 140, -60, 200, 200)
                    )
                    marker.fillType = FillType.Solid
                    marker.fillColor = Color.green
                    marker.strokeType = null
                    marker.shadowColor = null
                    marker.text = 'NEW'
                    marker.fontName = "HelveticaNeue"
                    marker.textSize = 30
                })

                // update existing cards:
                let updated_count = 0
                updated_ids.forEach((id, index) => {
                    let card = map_canvas.graphicWithName(id)
                    let story = stories[id]
                    let name_field = card.graphics.find(g => g.name == 'name_field')
                    if (card.userData["name"] != story["name"] | name_field.text != story["name"]){                       
                        name_field.text = story["name"]
                        card.setUserData('name', story["name"])
                        updated_count ++
                    }
                })

                // mark cards for removed stories:
                deleted_ids.forEach((id, index) => {
                    let card = map_canvas.graphicWithName(id)
                    line_one = map_canvas.addLine(new Point(card.geometry.origin.x, card.geometry.origin.y), new Point(card.geometry.origin.x + card.geometry.width, card.geometry.origin.y + card.geometry.height))
                    line_one.strokeThickness = 6
                    line_one.strokeColor = Color.red
                    line_two = map_canvas.addLine(new Point(card.geometry.origin.x, card.geometry.origin.y + card.geometry.height), new Point(card.geometry.origin.x + card.geometry.width, card.geometry.origin.y))
                    line_two.strokeThickness = 6
                    line_two.strokeColor = Color.red
                    new Group([line_one, line_two])
                })

                // Summary
                let summary = `Added: ${ added_ids.length }\nUpdated: ${ updated_count }\nMarked as deleted: ${ deleted_ids.length }`
                new Alert('Sync Summary:', summary).show()
            },
            function() {
                throw Error("Failed loading stories")
            })
            
        })

    });

    return action;
})();
